NODE JS ---

node js has a library called as libUV which is used to for asynchronous input or output 
node js also has a thread pool - so node js has only one thread but it works differently - thread pool is a c library libUV whihc node js uses for the javascript


// in node js the code does not run on the basis of priority it runs on the basis of phases 

working of the node js :--
node js has node process in which it has two things [main thread and thread pool] so when the top level code (code which is not written inside any rapper function) comes to the node te node execute it first iin the node thread and iske andar sabse pehle require code chalta hai 
usse baad events callback register hote hai (event callbacks are liek get req we pull) after that event loop is started in which it is like that if queue mai agar events hone tho loop run hota rahega 
event loop basically ek while loop ki tarah hota hai jismai ko true hone tak run krta rehta hai 


what is inside event loop? -- phase of the event loop
1. event loop first checks if there any epxired timer callbacks if yes then it will run it first - set timer are set interval and set timeout
2. the next it runs i/o pooling, matlab file read mai agar koi done hai tho uske callbacks ko run krdo
3. then it set immediate ke callbacks ko run krta hai an set immediate is a part of the node and not the part of the browser 
4. then ye close callbacks ko run krta hai -- close callbacks are callbakcs that runs on the close of the server or the file reading like fucntion ja ham file read kr rhe hai  or uss time pr koi fucntion run kr raha hai 
5. the it sees agar code mai kuch baccha hai if yes then code run again and if no then it breaks. eg - when we do server.listen the code never exsist bcz the node is waiting for the post and the get req to complete

** js in the browser and in the js works differently but their api are same matlab function ke parameter same hai 

// node performs all the task on mian thread and all the cpu intensive task are done on thread pool - has worker threads that perform operation asynchromnously and if the worker is the thread pool is busy the the next tasks waits

** to change the size of the thread pool we do - process.env.UV_THREADPOOL_SIZE = 1; by default the value is 4 and minimum 1

